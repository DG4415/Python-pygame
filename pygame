
FPS = 13
WINDOWWIDTH = 640
WINDOWHEIGHT = 480
CELLSIZE = 20
assert WINDOWWIDTH % CELLSIZE == 0, "Window width must be a multiple of cell size."
assert WINDOWHEIGHT % CELLSIZE == 0, "Window height must be a multiple of cell size."
CELLWIDTH = int(WINDOWWIDTH / CELLSIZE)
CELLHEIGHT = int(WINDOWHEIGHT / CELLSIZE)

#             R    G    B
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
ORANGE = (255, 127, 0)
SILVER = (192, 192, 192)
DARKGREEN = (0, 155, 0)
DARKGRAY = (40, 40, 40)
YELLOW = (255, 255, 0)
BGCOLOR = BLACK

UP = 'up'
DOWN = 'down'
LEFT = 'left'
RIGHT = 'right'

HEAD = 0  # syntactic sugar: index of the worm's head


def main():
    global FPSCLOCK, DISPLAYSURF, BASICFONT

    pygame.init()
    FPSCLOCK = pygame.time.Clock()
    DISPLAYSURF = pygame.display.set_mode((WINDOWWIDTH, WINDOWHEIGHT))
    BASICFONT = pygame.font.Font('freesansbold.ttf', 18)
    pygame.display.set_caption('Wormy')

    showStartScreen()
    while True:
        runGame()
        showGameOverScreen()


def runGame():
    # Inital settings
    global FPS
    FPS = 13

    global BGCOLOR
    BGCOLOR = BLACK

    score = 0

    # Set a random start point.
    startx = random.randint(5, CELLWIDTH - 6)
    starty = random.randint(5, CELLHEIGHT - 6)
    wormCoords = [{'x': startx, 'y': starty},
                  {'x': startx - 1, 'y': starty},
                  {'x': startx - 2, 'y': starty}]
    bomb    =    [{'x': startx - 2, 'y': starty-2},
                  {'x': startx - 2, 'y': starty-3},
                  {'x': startx - 3, 'y': starty-2},
                  {'x': startx - 3, 'y': starty-3},
                  {'x': startx - 4, 'y': starty-2},
                  {'x': startx - 4, 'y': starty-3},
                  {'x': startx - 4, 'y': starty-4},
                  {'x': startx - 3, 'y': starty-4},
                  {'x': startx - 2, 'y': starty-4}]
    

    
    direction = RIGHT

    # Start the target in a random place.
    color = RED
    color_1 = YELLOW
    color_2 = DARKGREEN
    target = getRandomLocation()
    trap_1 = getRandomLocation()
    trap_2 = getRandomLocation()
    trap_3 = getRandomLocation()
    trap_4 = getRandomLocation()
    trap_5 = getRandomLocation()
    txt= time.time()

    dg = 1
    
    while True:  # main game loop
        dg+=1
        if(dg == 50):
            target = getRandomLocation()
            dg=1
            startx = random.randint(5, CELLWIDTH - 6)
            starty = random.randint(5, CELLHEIGHT - 6)
            
            bomb    =    [{'x': startx - 2, 'y': starty-2},
                  {'x': startx - 2, 'y': starty-3},
                  {'x': startx - 3, 'y': starty-2},
                  {'x': startx - 3, 'y': starty-3},
                  {'x': startx - 4, 'y': starty-2},
                  {'x': startx - 4, 'y': starty-3},
                  {'x': startx - 4, 'y': starty-4},
                  {'x': startx - 3, 'y': starty-4},
                  {'x': startx - 2, 'y': starty-4}]

    
        for event in pygame.event.get():  # event handling loop
            if event.type == QUIT:
                terminate()
            elif event.type == KEYDOWN:
                if (event.key == K_LEFT or event.key == K_a) and direction != RIGHT:
                    direction = LEFT
                elif (event.key == K_RIGHT or event.key == K_d) and direction != LEFT:
                    direction = RIGHT
                elif (event.key == K_UP or event.key == K_w) and direction != DOWN:
                    direction = UP
                elif (event.key == K_DOWN or event.key == K_s) and direction != UP:
                    direction = DOWN
                elif event.key == K_ESCAPE:
                    terminate()

        # check if the worm has hit itself or the edge
        if wormCoords[HEAD]['x'] == -1 or wormCoords[HEAD]['x'] == CELLWIDTH or wormCoords[HEAD]['y'] == -1 or \
                wormCoords[HEAD]['y'] == CELLHEIGHT:
            return  # game over
        if wormCoords[HEAD]['x'] == trap_1['x'] and wormCoords[HEAD]['y'] == trap_1['y']:
            return
        if wormCoords[HEAD]['x'] == trap_2['x'] and wormCoords[HEAD]['y'] == trap_2['y']:
            return
        if wormCoords[HEAD]['x'] == trap_3['x'] and wormCoords[HEAD]['y'] == trap_3['y']:
            return
        if wormCoords[HEAD]['x'] == trap_4['x'] and wormCoords[HEAD]['y'] == trap_4['y']:
            return
        if wormCoords[HEAD]['x'] == trap_5['x'] and wormCoords[HEAD]['y'] == trap_5['y']:
            return
        if wormCoords[HEAD]['x'] == bomb[0]['x'] and wormCoords[HEAD]['y'] == bomb[0]['y']:
            return
        if wormCoords[HEAD]['x'] == bomb[1]['x'] and wormCoords[HEAD]['y'] == bomb[1]['y']:
            return
        if wormCoords[HEAD]['x'] == bomb[2]['x'] and wormCoords[HEAD]['y'] == bomb[2]['y']:
            return
        if wormCoords[HEAD]['x'] == bomb[3]['x'] and wormCoords[HEAD]['y'] == bomb[3]['y']:
            return
        if wormCoords[HEAD]['x'] == bomb[4]['x'] and wormCoords[HEAD]['y'] == bomb[4]['y']:
            return
        if wormCoords[HEAD]['x'] == bomb[5]['x'] and wormCoords[HEAD]['y'] == bomb[5]['y']:
            return
        if wormCoords[HEAD]['x'] == bomb[6]['x'] and wormCoords[HEAD]['y'] == bomb[6]['y']:
            return
        if wormCoords[HEAD]['x'] == bomb[7]['x'] and wormCoords[HEAD]['y'] == bomb[7]['y']:
            return
        if wormCoords[HEAD]['x'] == bomb[8]['x'] and wormCoords[HEAD]['y'] == bomb[8]['y']:
            return
        
        for wormBody in wormCoords[1:]:
            if wormBody['x'] == wormCoords[HEAD]['x'] and wormBody['y'] == wormCoords[HEAD]['y']:
                return  # game over

        # random creates one digit interger from 0 to 10, you may use this number during implementation
        random_number = random.randint(0, 10)

        # ******************************************************************************************************************************************#
        # check if worm has eaten an red target
        if wormCoords[HEAD]['x'] == target['x'] and wormCoords[HEAD]['y'] == target['y'] and color == RED:
            target = getRandomLocation()
            score = score + 1

            if (len(wormCoords) < 3):
                color = random.choice([RED, ORANGE, SILVER])
            else:
                color = random.choice([RED, BLUE, ORANGE, SILVER])

        # check if worm has eaten an blue target
        elif wormCoords[HEAD]['x'] == target['x'] and wormCoords[HEAD]['y'] == target['y'] and color == BLUE:
            target = getRandomLocation()
            score = score + 1
            del wormCoords[-1]
            del wormCoords[-1]

            if (len(wormCoords) < 3):
                color = random.choice([RED, ORANGE, SILVER])
            else:
                color = random.choice([RED, BLUE, ORANGE, SILVER])

        # check if worm has eaten an orange target
        elif wormCoords[HEAD]['x'] == target['x'] and wormCoords[HEAD]['y'] == target['y'] and color == ORANGE:
            target = getRandomLocation()
            score = score + 1
            del wormCoords[-1]

            if FPS >= 22:
                pass
            else:
                FPS = FPS + 3
            if (len(wormCoords) < 3):
                color = random.choice([RED, ORANGE, SILVER])
            else:
                color = random.choice([RED, BLUE, ORANGE, SILVER])

        # check if worm has eaten an silver target
        elif wormCoords[HEAD]['x'] == target['x'] and wormCoords[HEAD]['y'] == target['y'] and color == SILVER:
            target = getRandomLocation()
            score = score + 1
            del wormCoords[-1]

            if FPS <= 8:
                pass
            else:
                FPS = FPS - 3
            if (len(wormCoords) < 3):
                color = random.choice([RED, ORANGE, SILVER])
            else:
                color = random.choice([RED, BLUE, ORANGE, SILVER])

        # worm has eaten nothing
        else:
            del wormCoords[-1]  # remove worm's tail segment

        # ******************************************************************************************************************************************#

        # move the worm by adding a segment in the direction it is moving
        if direction == UP:
            newHead = {'x': wormCoords[HEAD]['x'], 'y': wormCoords[HEAD]['y'] - 1}
        elif direction == DOWN:
            newHead = {'x': wormCoords[HEAD]['x'], 'y': wormCoords[HEAD]['y'] + 1}
        elif direction == LEFT:
            newHead = {'x': wormCoords[HEAD]['x'] - 1, 'y': wormCoords[HEAD]['y']}
        elif direction == RIGHT:
            newHead = {'x': wormCoords[HEAD]['x'] + 1, 'y': wormCoords[HEAD]['y']}

        wormCoords.insert(0, newHead)
        DISPLAYSURF.fill(BGCOLOR)
        drawGrid()
        drawWorm(wormCoords)
        drawTarget(trap_1, color_1)
        drawTarget(trap_2, color_1)
        drawTarget(trap_3, color_1)
        drawTarget(trap_4, color_1)
        drawTarget(trap_5, color_1)
        drawTarget(target, color)
        drawbomb(bomb)
        drawScore(score, len(wormCoords), FPS)
        pygame.display.update()
        FPSCLOCK.tick(FPS)

def drawPressKeyMsg():
    pressKeySurf = BASICFONT.render('Press a key to play.', True, DARKGRAY)
    pressKeyRect = pressKeySurf.get_rect()
    pressKeyRect.topleft = (WINDOWWIDTH - 200, WINDOWHEIGHT - 30)
    DISPLAYSURF.blit(pressKeySurf, pressKeyRect)


def checkForKeyPress():
    if len(pygame.event.get(QUIT)) > 0:
        terminate()

    keyUpEvents = pygame.event.get(KEYUP)
    if len(keyUpEvents) == 0:
        return None
    if keyUpEvents[0].key == K_ESCAPE:
        terminate()
    return keyUpEvents[0].key


def showStartScreen():
    titleFont = pygame.font.Font('freesansbold.ttf', 100)
    titleSurf1 = titleFont.render('Wormy!', True, WHITE, DARKGREEN)
    titleSurf2 = titleFont.render('Wormy!', True, GREEN)

    degrees1 = 0
    degrees2 = 0
    while True:
        DISPLAYSURF.fill(BGCOLOR)
        rotatedSurf1 = pygame.transform.rotate(titleSurf1, degrees1)
        rotatedRect1 = rotatedSurf1.get_rect()
        rotatedRect1.center = (WINDOWWIDTH / 2, WINDOWHEIGHT / 2)
        DISPLAYSURF.blit(rotatedSurf1, rotatedRect1)

        rotatedSurf2 = pygame.transform.rotate(titleSurf2, degrees2)
        rotatedRect2 = rotatedSurf2.get_rect()
        rotatedRect2.center = (WINDOWWIDTH / 2, WINDOWHEIGHT / 2)
        DISPLAYSURF.blit(rotatedSurf2, rotatedRect2)

        drawPressKeyMsg()

        if checkForKeyPress():
            pygame.event.get()  # clear event queue
            return
        pygame.display.update()
        FPSCLOCK.tick(FPS)
        degrees1 += 3  # rotate by 3 degrees each frame
        degrees2 += 7  # rotate by 7 degrees each frame


def terminate():
    pygame.quit()
    sys.exit()


def getRandomLocation():
    return {'x': random.randint(1, CELLWIDTH - 2), 'y': random.randint(1, CELLHEIGHT - 2)}


def showGameOverScreen():
    gameOverFont = pygame.font.Font('freesansbold.ttf', 150)
    gameSurf = gameOverFont.render('Game', True, WHITE)
    overSurf = gameOverFont.render('Over', True, WHITE)
    gameRect = gameSurf.get_rect()
    overRect = overSurf.get_rect()
    gameRect.midtop = (WINDOWWIDTH / 2, 10)
    overRect.midtop = (WINDOWWIDTH / 2, gameRect.height + 10 + 25)

    DISPLAYSURF.blit(gameSurf, gameRect)
    DISPLAYSURF.blit(overSurf, overRect)
    drawPressKeyMsg()
    pygame.display.update()
    pygame.time.wait(500)
    checkForKeyPress()  # clear out any key presses in the event queue

    while True:
        if checkForKeyPress():
            pygame.event.get()  # clear event queue
            return


def drawScore(score, length, fps):
    scoreSurf = BASICFONT.render('Score: %d' % (score), True, WHITE)
    scoreRect = scoreSurf.get_rect()
    scoreRect.topleft = (WINDOWWIDTH - 120, 10)
    DISPLAYSURF.blit(scoreSurf, scoreRect)
    scoreSurf = BASICFONT.render('Length: %d' % (length), True, WHITE)
    scoreRect = scoreSurf.get_rect()
    scoreRect.topleft = (WINDOWWIDTH - 120, 40)
    DISPLAYSURF.blit(scoreSurf, scoreRect)
    scoreSurf = BASICFONT.render('FPS: %d' % (fps), True, WHITE)
    scoreRect = scoreSurf.get_rect()
    scoreRect.topleft = (WINDOWWIDTH - 120, 70)
    DISPLAYSURF.blit(scoreSurf, scoreRect)


def drawWorm(wormCoords):
    for coord in wormCoords:
        x = coord['x'] * CELLSIZE
        y = coord['y'] * CELLSIZE
        wormSegmentRect = pygame.Rect(x, y, CELLSIZE, CELLSIZE)
        pygame.draw.rect(DISPLAYSURF, DARKGREEN, wormSegmentRect)
        wormInnerSegmentRect = pygame.Rect(x + 4, y + 4, CELLSIZE - 8, CELLSIZE - 8)
        pygame.draw.rect(DISPLAYSURF, GREEN, wormInnerSegmentRect)

def drawbomb(wormCoords):
    for coord in wormCoords:
        x = coord['x'] * CELLSIZE
        y = coord['y'] * CELLSIZE
        wormSegmentRect = pygame.Rect(x, y, CELLSIZE, CELLSIZE)
        pygame.draw.rect(DISPLAYSURF, DARKGREEN, wormSegmentRect)
        wormInnerSegmentRect = pygame.Rect(x + 4, y + 4, CELLSIZE - 8, CELLSIZE - 8)
        pygame.draw.rect(DISPLAYSURF, DARKGREEN, wormInnerSegmentRect)


def drawTarget(coord, color):
    x = coord['x'] * CELLSIZE
    y = coord['y'] * CELLSIZE
    targetRect = pygame.Rect(x, y, CELLSIZE, CELLSIZE)
    pygame.draw.rect(DISPLAYSURF, color, targetRect)


def drawGrid():
    for x in range(0, WINDOWWIDTH, CELLSIZE):  # draw vertical lines
        pygame.draw.line(DISPLAYSURF, DARKGRAY, (x, 0), (x, WINDOWHEIGHT))
    for y in range(0, WINDOWHEIGHT, CELLSIZE):  # draw horizontal lines
        pygame.draw.line(DISPLAYSURF, DARKGRAY, (0, y), (WINDOWWIDTH, y))


if __name__ == '__main__':
    main()
